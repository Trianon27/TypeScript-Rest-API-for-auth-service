import ldap, { SearchOptions, Control, SearchEntryObject } from "ldapjs";
import type { Logger } from "fast-node-logger";
export type { SearchEntryObject } from "ldapjs";
export interface IClientConfig extends Omit<ldap.ClientOptions, "url" | "bindDN"> {
    /** Domain name with format: ldap://{domain.com} */
    ldapServerUrl: string;
    /** Password to connect to AD */
    pass?: string;
    /** User to connect to AD */
    user?: string;
    /** instance of pino logger */
    logger?: Logger;
}
/** A Change object maps to the LDAP protocol of a modify change, and requires you to set the operation and modification. The operation is a string, and must be one of:
 * - replace: Replaces the attribute referenced in modification. If the modification has no values, it is equivalent to a delete.
 * - add: Adds the attribute value(s) referenced in modification. The attribute may or may not already exist.
 * - delete: Deletes the attribute (and all values) referenced in modification.

modification is just a plain old JS object with the values you want. */
export declare type ModifyChange<T = any> = {
    operation: "add" | "delete" | "replace";
    modification: {
        [key in keyof Partial<T>]: any;
    };
};
declare type ModifyAttributeFnInput<T> = {
    dn: string;
    changes: ModifyChange<T>[];
    controls?: any;
};
declare type QueryFnInput<T> = {
    options?: Omit<SearchOptions, "attributes">;
    /** select return attributes
     * - ["*"] for all available fields
     */
    attributes?: Array<keyof Partial<T> | "*">;
    controls?: Control | Control[];
    /** base dn to search */
    base: string;
};
declare type AddFnInput<T> = {
    entry: {
        [key in keyof Partial<T>]: string | string[];
    };
    dn: string;
    controls?: any;
};
declare type CompareFnInput<T = any> = {
    dn: string;
    controls?: any;
    /** attribute to compare
     * - Note: it just use first property, no matter how many property gets
     */
    field: {
        [key in keyof Partial<T>]: string;
    };
};
declare type DelFnInput = {
    dn: string;
    controls?: any;
};
declare type ExtendedOpFnInput = {
    oid: string;
    value: string;
    controls?: any;
};
declare type ModifyDnFnInput = {
    dn: string;
    newDn: string;
    controls?: any;
};
declare type BindFnInput = {
    user?: string;
    pass?: string;
};
/** @description this is a class to provide low level promise base interaction with ldap server */
export declare class Client {
    private config;
    private client;
    private logger?;
    constructor(config: IClientConfig);
    /** connection status */
    getConnectionStatus: () => boolean;
    /** @return a connected ldap client that is useful for use flexibility of [ldap.js](http://ldapjs.org/) directly. */
    bind(input?: BindFnInput): Promise<ldap.Client>;
    /** unbind connection */
    unbind(): Promise<void>;
    /** unbind the connection and don't allow it to connect again. */
    destroy(): Promise<void>;
    /** bind to server if client is not already bound */
    private connect;
    /** @description raw search to provided full flexibility */
    query<T = any>({ options, controls, base, attributes, }: QueryFnInput<T>): Promise<ldap.SearchEntry[]>;
    /** @description raw search returns just attributes
     *
     * // TODO: add Generic type for return data
     */
    queryAttributes<T = any>({ options, attributes, controls, base, }: QueryFnInput<T>): Promise<SearchEntryObject[]>;
    /** Performs an add operation against the LDAP server.
     * @description Allows you to add an entry (which is just a plain JS object)
     */
    add<T = any>({ entry, dn, controls, }: AddFnInput<T>): Promise<boolean>;
    /** Performs a LDAP compare operation with the given attribute and value against the entry referenced by dn. */
    compare<T = any>({ dn, controls, field, }: CompareFnInput<T>): Promise<boolean | undefined>;
    /** Deletes an entry from the LDAP server. */
    del({ dn, controls }: DelFnInput): Promise<boolean>;
    /**
     * @description Performs an extended operation against LDAP server.
     * @example
     * const {value} = await client.extendedOp('1.3.6.1.4.1.4203.1.11.3');
     * console.log('whois: ' + value);
     */
    extendedOp({ oid, value, controls, }: ExtendedOpFnInput): Promise<{
        value: string;
        res: any;
    }>;
    /**
     * @description Performs a LDAP modifyDN (rename) operation against an entry in the LDAP server. A couple points with this client API:
     * - There is no ability to set "keep old dn." It's always going to flag the old dn to be purged.
     * - The client code will automatically figure out if the request is a "new superior" request ("new superior" means move to a different part of the tree, as opposed to just renaming the leaf).
     */
    modifyDn({ dn, newDn, controls, }: ModifyDnFnInput): Promise<boolean>;
    /** Performs a LDAP modify operation against attributes of the existing LDAP entity. This API requires you to pass in a Change object.
     */
    modifyAttribute<T = any>({ dn, changes, controls, }: ModifyAttributeFnInput<T>): Promise<boolean>;
}
