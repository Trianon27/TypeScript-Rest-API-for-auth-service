"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteOldFiles = exports.createDirectoryIfNotExist = void 0;
const fs = __importStar(require("fs"));
const rimraf_1 = __importDefault(require("rimraf"));
const path = __importStar(require("path"));
const util_1 = require("util");
const variables_1 = require("./variables");
function createDirectoryIfNotExist(directory) {
    return __awaiter(this, void 0, void 0, function* () {
        const mkdir = util_1.promisify(fs.mkdir);
        const stat = util_1.promisify(fs.stat);
        yield stat(directory).catch((err) => __awaiter(this, void 0, void 0, function* () {
            if (err && err.errno === -4058) {
                //Create the directory, call the callback.
                yield mkdir(directory);
                return true;
            }
            else {
                //just in case there was a different error:
                console.log(err);
                return false;
            }
        }));
        return true;
    });
}
exports.createDirectoryIfNotExist = createDirectoryIfNotExist;
const deleteOldFiles = ({ dirPath, options }) => {
    var _a;
    try {
        const pathToDelete = dirPath !== null && dirPath !== void 0 ? dirPath : variables_1.defaultLogFolder;
        const keepAliveTime = (_a = options === null || options === void 0 ? void 0 : options.keepAliveTime) !== null && _a !== void 0 ? _a : 180000;
        console.log(`deleting old files from folder: ${pathToDelete}`);
        fs.readdir(pathToDelete, (err1, files) => {
            if (!err1) {
                files.forEach(file => {
                    if ((options && options.keepMetaFiles && file === ".empty") ||
                        file === ".Readme.md" ||
                        file === ".README") {
                        return;
                    }
                    fs.stat(path.join(pathToDelete, file), (err2, stat) => {
                        if (!err2) {
                            const now = new Date().getTime();
                            const endTime = new Date(stat.ctime).getTime() + keepAliveTime;
                            if (now > endTime) {
                                rimraf_1.default(path.join(pathToDelete, file), () => {
                                    null;
                                });
                            }
                        }
                    });
                });
            }
        });
    }
    catch (error) {
        console.error(error);
    }
};
exports.deleteOldFiles = deleteOldFiles;
//# sourceMappingURL=utils.js.map